function [word_table,str_index_list] = problem65_word_index(str_list)
%PROBLEM65_WORD_INDEX Word Counting and Indexing
%
% You are given a list of strings, each being a list of words divided by
% spaces. Break the strings into words, then return a master word table of all
% the words and an indexed version of each string.
%
% The master list should have no repeated entries and should be sorted in
% alphabetical order.
%
% Example
%   If str_list = {'one two three','two one four zero'}
%   then
%   word_table = {'four','one','three','two','zero'}
%   str_index_list = {[2 4 3],[4 2 1 5]}.
%
% Notice that no words are repeated in word_table, and each string in the
% string_list can be regenerated by referencing into the word_table using the
% string_index_list.

% Sort all unqiue words.
words = {};
str_list = reshape(str_list, 1, []);
for s = str_list
  for cellword = split(s)'
    words = [words, cell2mat(cellword)];
  end
end
word_table = unique(words);

% Assign numbers to all words.
sz = length(word_table);
nums = 1:sz;

% Assign numbers to list of strings.
str_index_list = {};
for s = str_list
  il = [];
  for cellword = split(s)'
    il = [il, nums(strcmp(word_table, cell2mat(cellword)))];
  end
  str_index_list = [str_index_list, il];
end
end
